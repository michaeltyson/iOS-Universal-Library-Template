<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.base</string>
		<string>com.apple.dt.unit.iPhoneBase</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Definitions</key>
	<dict>
		<key>___PACKAGENAMEASIDENTIFIER___.h</key>
		<dict>
			<key>Path</key>
			<string>___PACKAGENAMEASIDENTIFIER___.h</string>
		</dict>
		<key>___PACKAGENAMEASIDENTIFIER___.m</key>
		<dict>
			<key>Path</key>
			<string>___PACKAGENAMEASIDENTIFIER___.m</string>
		</dict>
		<key>___PACKAGENAME___-Prefix.pch:objC:importFoundation</key>
		<string>#import &lt;Foundation/Foundation.h&gt;
</string>
	</dict>
	<key>Description</key>
	<string>This template builds a universal static library that links against the Foundation framework, containing both simulator and ARM architectures.</string>
	<key>Identifier</key>
	<string>com.atastypixel.cocoaTouchUniversalStaticLibrary</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>___PACKAGENAME___-Prefix.pch:objC:importFoundation</string>
		<string>___PACKAGENAMEASIDENTIFIER___.h</string>
		<string>___PACKAGENAMEASIDENTIFIER___.m</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>true</string>
			<key>Description</key>
			<string>Whether a unit test bundle should be created</string>
			<key>Identifier</key>
			<string>includeUnitTests</string>
			<key>Name</key>
			<string>Include Unit Tests</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Components</key>
						<array>
							<dict>
								<key>Identifier</key>
								<string>com.apple.dt.unit.cocoaTouchFrameworkUnitTestBundle</string>
								<key>Name</key>
								<string>___PACKAGENAME___Tests</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>Targets</key>
	<array>
		<dict>
			<key>BuildPhases</key>
			<array>
				<dict>
					<key>Class</key>
					<string>ShellScript</string>
					<key>ShellPath</key>
					<string>/bin/sh</string>
					<key>ShowEnvVarsInLog</key>
					<string>false</string>
					<key>ShellScript</key>
					<string>set -e

if [ &quot;$CALLED_FROM_MASTER&quot; ]
then
# This is the other build, called from the original instance
exit 0
fi

# Clean up prior to build

CURRENTCONFIG_DEVICE_DIR=&quot;${SYMROOT}/${CONFIGURATION}-iphoneos&quot;
CURRENTCONFIG_SIMULATOR_DIR=&quot;${SYMROOT}/${CONFIGURATION}-iphonesimulator&quot;
CURRENTCONFIG_UNIVERSAL_DIR=&quot;${SYMROOT}/${CONFIGURATION}-universal&quot;

if [ ! -f &quot;${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}&quot; ]; then
  echo &quot;Device build cleaned; cleaning other builds too&quot;
  rm -f &quot;${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}&quot; 
  rm -f &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot;
elif [ ! -f &quot;${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}&quot; ]; then
  echo &quot;Simulator build cleaned; cleaning other builds too&quot;
  rm -f &quot;${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}&quot;
  rm -f &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot;
fi
</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Sources</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Frameworks</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Headers</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>ShellScript</string>
					<key>ShellPath</key>
					<string>/bin/sh</string>
					<key>ShowEnvVarsInLog</key>
					<string>false</string>
					<key>ShellScript</key>
					<string>set -e

#
# Universal static library script
# http://github.com/michaeltyson/iOS-Universal-Library-Template
#
# Version 2.5
#
# Purpose:
#   Create a static library for iPhone from within XCode
#
# Author: Adam Martin - http://twitter.com/redglassesapps
# Tweaked and made into an Xcode template by Michael Tyson - http://atastypixel.com/blog
# Based on original script from Eonil
# More info: see this Stack Overflow question: http://stackoverflow.com/questions/3520977/build-fat-static-library-device-simulator-using-xcode-and-sdk-4
# Additional changes by John Lawson &lt;http://jelawson.com&gt; to copy the CURRENTCONFIG_DEVICE_DIR to the CURRENTCONFIG_UNIVERSAL_DIR instead of creating it
# to include other files that might have been copied via Copy Files build phases (e.g. readme files, xibs, etc); this removes the need to copy just
# the header folder.
#
#################[ Tests: helps workaround any future bugs in Xcode ]########
#
DEBUG_THIS_SCRIPT=&quot;true&quot;

if [ $DEBUG_THIS_SCRIPT = &quot;true&quot; ]
then
echo &quot;########### TESTS #############&quot;
echo &quot;Use the following variables when debugging this script; note that they may change on recursions&quot;
echo &quot;BUILD_DIR = $BUILD_DIR&quot;
echo &quot;BUILD_ROOT = $BUILD_ROOT&quot;
echo &quot;CONFIGURATION_BUILD_DIR = $CONFIGURATION_BUILD_DIR&quot;
echo &quot;BUILT_PRODUCTS_DIR = $BUILT_PRODUCTS_DIR&quot;
echo &quot;CONFIGURATION_TEMP_DIR = $CONFIGURATION_TEMP_DIR&quot;
echo &quot;TARGET_BUILD_DIR = $TARGET_BUILD_DIR&quot;
fi

if [ &quot;$CALLED_FROM_MASTER&quot; ]
then
# This is the other build, called from the original instance
exit 0
fi

# Find the BASESDK version number
SDK_VERSION=$(echo ${SDK_NAME} | grep -o &apos;.\{3\}$&apos;)

# Next, work out if we&apos;re in SIM or DEVICE
if [ ${PLATFORM_NAME} = &quot;iphonesimulator&quot; ]
then
OTHER_SDK_TO_BUILD=iphoneos${SDK_VERSION}
else
OTHER_SDK_TO_BUILD=iphonesimulator${SDK_VERSION}
fi

echo &quot;XCode has selected SDK: ${PLATFORM_NAME} with version: ${SDK_VERSION} (although back-targetting: ${IPHONEOS_DEPLOYMENT_TARGET})&quot;
echo &quot;...therefore, OTHER_SDK_TO_BUILD = ${OTHER_SDK_TO_BUILD}&quot;

# Build the other architecture
echo &quot;xcodebuild -project \&quot;${PROJECT_FILE_PATH}\&quot; -configuration \&quot;${CONFIGURATION}\&quot; -target \&quot;${TARGET_NAME}\&quot; -sdk \&quot;${OTHER_SDK_TO_BUILD}\&quot; ${ACTION} RUN_CLANG_STATIC_ANALYZER=NO BUILD_DIR=\&quot;${BUILD_DIR}\&quot; BUILD_ROOT=\&quot;${BUILD_ROOT}\&quot; CALLED_FROM_MASTER=1&quot;
xcodebuild -project &quot;${PROJECT_FILE_PATH}&quot; -configuration &quot;${CONFIGURATION}&quot; -target &quot;${TARGET_NAME}&quot; -sdk &quot;${OTHER_SDK_TO_BUILD}&quot; ${ACTION} RUN_CLANG_STATIC_ANALYZER=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; CALLED_FROM_MASTER=1

# Merge built architectures
CURRENTCONFIG_DEVICE_DIR=&quot;${SYMROOT}/${CONFIGURATION}-iphoneos&quot;
CURRENTCONFIG_SIMULATOR_DIR=&quot;${SYMROOT}/${CONFIGURATION}-iphonesimulator&quot;
CURRENTCONFIG_UNIVERSAL_DIR=&quot;${SYMROOT}/${CONFIGURATION}-universal&quot;

echo &quot;Taking device build from: ${CURRENTCONFIG_DEVICE_DIR}&quot;
echo &quot;Taking simulator build from: ${CURRENTCONFIG_SIMULATOR_DIR}&quot;
echo &quot;...I will output a universal build to: ${CURRENTCONFIG_UNIVERSAL_DIR}&quot;

if [ ! -e &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; -o \
&quot;${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}&quot; -nt &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; -o \
&quot;${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}&quot; -nt &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; ]
then
rm -rf &quot;${CURRENTCONFIG_UNIVERSAL_DIR}&quot;
cp -R &quot;${CURRENTCONFIG_DEVICE_DIR}&quot; &quot;${CURRENTCONFIG_UNIVERSAL_DIR}&quot;
rm -f &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot;

echo &quot;lipo: for current configuration (${CONFIGURATION}) creating output file: ${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot;
lipo -create -output &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; &quot;${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}&quot; &quot;${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}&quot;

echo &quot;Copying universal build back over to ${CURRENTCONFIG_DEVICE_DIR} and ${CURRENTCONFIG_SIMULATOR_DIR}&quot;
cp &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; &quot;${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}&quot;
cp &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot; &quot;${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}&quot;
touch &quot;${CURRENTCONFIG_UNIVERSAL_DIR}/${EXECUTABLE_NAME}&quot;

else
echo &quot;Everything up to date.&quot;
fi
</string>
				</dict>
			</array>
			<key>Frameworks</key>
			<array>
				<string>Foundation</string>
			</array>
			<key>ProductType</key>
			<string>com.apple.product-type.library.static</string>
			<key>SharedSettings</key>
			<dict>
				<key>ARCHS</key>
				<string>armv6 $(ARCHS_STANDARD_32_BIT)</string>
				<key>GCC_THUMB_SUPPORT</key>
				<string>NO</string>
				<key>DSTROOT</key>
				<string>/tmp/___PACKAGENAMEASIDENTIFIER___.dst</string>
				<key>GCC_PRECOMPILE_PREFIX_HEADER</key>
				<string>YES</string>
				<key>GCC_PREFIX_HEADER</key>
				<string>___PACKAGENAME___/___PACKAGENAME___-Prefix.pch</string>
				<key>OTHER_LDFLAGS</key>
				<string>-ObjC</string>
				<key>SKIP_INSTALL</key>
				<string>YES</string>
			</dict>
		</dict>
	</array>
</dict>
</plist>
